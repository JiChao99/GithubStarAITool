@page "/"
@using GithubStarAITool.Models
@using GithubStarAITool.Services
@inject IGitHubService GitHubService
@inject IEmbeddingService EmbeddingService
@inject IIndexedDBService IndexedDBService
@inject IVectorSimilarityService VectorSimilarityService

<div class="container mt-4">
    <h3 class="text-center mb-4">GitHub Starred Repositories</h3>

    <div class="search-container mb-4">
        <div class="input-group">
            <input type="text" class="form-control" @bind="username" @bind:event="oninput" 
                   placeholder="Enter GitHub username" @onkeyup="@(async (e) => { if (e.Key == "Enter") await SearchRepos(); })"/>
            <button class="btn btn-secondary" @onclick="LoadAllRepos" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span> Loading...</span>
                }
                else
                {
                    <span>Load All Repos</span>
                }
            </button>
        </div>
    </div>

    <div class="search-container mb-4">
        <div class="input-group">
            <input type="text" class="form-control" @bind="searchText" @bind:event="oninput" 
                   placeholder="Enter search text" @onkeyup="@(async (e) => { if (e.Key == "Enter") await SearchSimilarRepos(); })"/>
            <button class="btn btn-primary" @onclick="SearchSimilarRepos" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span> Searching...</span>
                }
                else
                {
                    <span>Search Similar</span>
                }
            </button>
        </div>
    </div>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    @if (repos?.Items != null && repos.Items.Any())
    {
        <div class="repo-list">
            @foreach (var repo in repos.Items)
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">
                            <a href="@repo.HtmlUrl" target="_blank">@repo.Name</a>
                        </h5>
                        <p class="card-text">@repo.Description</p>
                        <div class="card-text">
                            @if (!string.IsNullOrEmpty(repo.Language))
                            {
                                <small class="text-muted me-3">
                                    <i class="bi bi-code-square"></i> @repo.Language
                                </small>
                            }
                            <small class="text-muted">
                                <i class="bi bi-star"></i> @repo.StargazersCount
                            </small>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (repos.HasNextPage)
        {
            <div class="text-center mt-4 mb-4">
                <button class="btn btn-outline-primary" @onclick="LoadMoreRepos" disabled="@isLoadingMore">
                    @if (isLoadingMore)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span> Loading...</span>
                    }
                    else
                    {
                        <span>Load More</span>
                    }
                </button>
            </div>
        }
    }
</div>

@code {
    private string username = string.Empty;
    private string searchText = string.Empty;
    private PaginatedList<GitHubRepo>? repos;
    private bool isLoading;
    private bool isLoadingMore;
    private string? errorMessage;
    private int currentPage = 1;
    private List<GitHubRepo> allRepos = new();

    private async Task SearchRepos()
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            errorMessage = "Please enter a GitHub username";
            return;
        }

        try
        {
            errorMessage = null;
            isLoading = true;
            currentPage = 1;
            allRepos.Clear();
            
            repos = await GitHubService.GetStarredReposAsync(username, currentPage);
            
            if (!repos.Items.Any())
            {
                errorMessage = "No starred repositories found for this user";
            }
            else
            {
                allRepos.AddRange(repos.Items);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            repos = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadMoreRepos()
    {
        try
        {
            isLoadingMore = true;
            currentPage++;
            
            var nextPage = await GitHubService.GetStarredReposAsync(username, currentPage);
            allRepos.AddRange(nextPage.Items);
            
            // Update the repos with the combined results while preserving the HasNextPage from the latest request
            repos = new PaginatedList<GitHubRepo>(allRepos, currentPage, nextPage.PageSize, nextPage.HasNextPage);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading more repositories: {ex.Message}";
        }
        finally
        {
            isLoadingMore = false;
        }
    }

    private async Task LoadAllRepos()
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            errorMessage = "Please enter a GitHub username";
            return;
        }

        try
        {
            errorMessage = null;
            isLoading = true;
            allRepos.Clear();
            
            var allStarredRepos = await GitHubService.GetAllStarredReposAsync(username);
            foreach (var repo in allStarredRepos)
            {
                // Check if the repo ID exists in IndexedDB
                var existingRepoVector = await IndexedDBService.GetRepositoryVectorByIdAsync(repo.Id);
                if (existingRepoVector != null)
                {
                    Console.WriteLine($"Repo with ID {repo.Id} already exists.");
                    continue;
                }

                var content = repo.FullName + " " + repo.Description + "" + repo.Language;

                if (string.IsNullOrWhiteSpace(content))
                {
                    continue;
                }

                var vector = await EmbeddingService.GetEmbeddingAsync(content);
                var repoVector = new RepositoryVector { Repository = repo, Vector = vector };
                await IndexedDBService.StoreRepositoryVectorAsync(repoVector);
            }
            
            repos = new PaginatedList<GitHubRepo>(allStarredRepos, 1, allStarredRepos.Count, false);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            repos = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchSimilarRepos()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            errorMessage = "Please enter search text";
            return;
        }

        try
        {
            errorMessage = null;
            isLoading = true;
            
            var similarRepos = await VectorSimilarityService.FindSimilarRepositoriesAsync(searchText);
            repos = new PaginatedList<GitHubRepo>(similarRepos.Select(x => x.Repo).ToList(), 1, similarRepos.Count, false);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            repos = null;
        }
        finally
        {
            isLoading = false;
        }
    }
}
