@page "/"
@using GithubStarAITool.Models
@using GithubStarAITool.Services
@inject IGitHubService GitHubService

<div class="container mt-4">
    <h3 class="text-center mb-4">GitHub Starred Repositories</h3>

    <div class="search-container mb-4">
        <div class="input-group">
            <input type="text" class="form-control" @bind="username" @bind:event="oninput" 
                   placeholder="Enter GitHub username" @onkeyup="@(async (e) => { if (e.Key == "Enter") await SearchRepos(); })"/>
            <button class="btn btn-primary" @onclick="SearchRepos" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span> Loading...</span>
                }
                else
                {
                    <span>Search</span>
                }
            </button>
        </div>
    </div>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    @if (repos?.Items != null && repos.Items.Any())
    {
        <div class="row g-4">
            @foreach (var repo in repos.Items)
            {
                <div class="col-md-6">
                    <div class="card h-100 repo-card">
                        <div class="card-body">
                            <h5 class="card-title">
                                <a href="@repo.HtmlUrl" target="_blank" class="text-decoration-none">
                                    <i class="bi bi-github me-2"></i>@repo.Name
                                </a>
                            </h5>
                            @if (!string.IsNullOrEmpty(repo.Language))
                            {
                                <span class="badge bg-secondary mb-2">@repo.Language</span>
                            }
                            <p class="card-text">@(string.IsNullOrEmpty(repo.Description) ? "No description available" : repo.Description)</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    <i class="bi bi-star-fill text-warning"></i> @repo.StargazersCount
                                </small>
                                <small class="text-muted">@repo.StarredAt.ToString("yyyy-MM-dd")</small>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="d-flex justify-content-center mt-4">
            <nav aria-label="Repository navigation">
                <ul class="pagination">
                    <li class="page-item @(!repos.HasPreviousPage ? "disabled" : "")">
                        <button class="page-link" @onclick="PreviousPage" disabled="@(!repos.HasPreviousPage)">Previous</button>
                    </li>
                    <li class="page-item active">
                        <span class="page-link">Page @currentPage of @repos.TotalPages</span>
                    </li>
                    <li class="page-item @(!repos.HasNextPage ? "disabled" : "")">
                        <button class="page-link" @onclick="NextPage" disabled="@(!repos.HasNextPage)">Next</button>
                    </li>
                </ul>
            </nav>
        </div>
    }
</div>

@code {
    private string username = string.Empty;
    private PaginatedList<GitHubRepo>? repos;
    private bool isLoading;
    private string? errorMessage;
    private int currentPage = 1;
    private const int PageSize = 10;

    private async Task SearchRepos()
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            errorMessage = "Please enter a GitHub username";
            return;
        }

        try
        {
            errorMessage = null;
            isLoading = true;
            currentPage = 1;
            repos = await GitHubService.GetStarredReposAsync(username, currentPage, PageSize);
            
            if (!repos.Items.Any())
            {
                errorMessage = "No starred repositories found for this user";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            repos = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task PreviousPage()
    {
        if (repos?.HasPreviousPage == true)
        {
            currentPage--;
            await LoadPage();
        }
    }

    private async Task NextPage()
    {
        if (repos?.HasNextPage == true)
        {
            currentPage++;
            await LoadPage();
        }
    }

    private async Task LoadPage()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            repos = await GitHubService.GetStarredReposAsync(username, currentPage, PageSize);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
